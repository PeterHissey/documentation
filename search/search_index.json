{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Using%20the%20REST%20API/1.%20Introduction/","title":"1. Introduction","text":"<p>This document describes the Media Operations Platform REST API, which is the interface by which a third-party component can make REST calls over HTTP to the Platform application server endpoint and receive responses from it. It does not cover any of the following topics:</p> <ul> <li>Web Hooks \u2013 please refer to the following article called Webhooks user guide 10.4. </li> <li>The Platform SOAP API</li> <li>Platform Service Order Adapters</li> <li>Other outbound interfaces, such as alternate authentication systems.     Although most of this document is relevant to the v1 API, it also includes features that only exist in the v2 API and are primarily intended for users of the v2 API.</li> </ul>"},{"location":"Using%20the%20REST%20API/10.%20Key%20fields/","title":"10. Key fields","text":"<ul> <li>The nested sub-group identified by the primary key field name, provides all the key fields of a document. As a minimum, this sub-group always contains the primary key field and an 'external key' field.</li> </ul> <p>Example shows a section of the Work Order's (jm_work_order) key fields in the sub-group wo_no_seq.</p> <p>{</p> <p>\"jm_work_order\": [</p> <p>{</p> <p>\"wo_no_seq\": {</p> <p>\"wo_no_seq\": \"2627-1\",</p> <p>\"external_key\": null</p> <p>},</p> <p>\"custom_field_data_no\": 63888,</p> <p>\"wo_desc\": \"Dscription2\",</p> <p>\"wo_desc_2\": null,</p> <p>...</p> <ul> <li> <ul> <li>In the above example wo_no_seq and external_key are the two key fields that can be used in lookup requests.</li> <li>Some documents may have additional key fields such as Media Assets (known by the document name lib_master) See example below.</li> </ul> </li> </ul> <p>Example Media Asset document where there are additional key fields for 'barcode' &amp; 'umid' in the 'master_no' group.</p> <p>{</p> <p>\"lib_master\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 53,</p> <p>\"barcode\": \"1838\",</p> <p>\"external_key\": null,</p> <p>\"umid\": null</p> <p>},</p> <p>\"cust_id\": {</p> <p>\"list_id\": \"23\",</p> <p>\"other_cust_id\": null,</p> <p>\"cust_reference\": null,</p> <p>\"external_key\": null,</p> <p>\"cust_id\": \"23\"</p> <p>},</p> <p>\"customer_name\": \"Gotta Dance Productions\",</p> <p>\"master_desc\": \"A Winter's Tale\",</p> <p>\"barcode\": \"1838\",</p> <p>\"container_master_no\": null,</p> <p>...</p> <ul> <li>External key fields exist on all documents and are designed to be used by external systems to store the external system's unique identifier for the record. The external key field can then be used in future look-ups as opposed to the external system having to know the Xytech key field value..</li> </ul>"},{"location":"Using%20the%20REST%20API/11.%20Query%20Parameters/","title":"11. Query Parameters","text":"<p>GET and PATCH List endpoints support query parameters.</p> <p>This section describes the syntax and options used for the query parameter. This is a mandatory parameter for List documents.</p> <p>The general format for a \u201cquery\u201d parameter is to add the parameter as query={} to the end of a GET request for a List document after the parameter delimiter (\u201c?\u201d), where the value of query= is a JSON object:</p> <p>http://{base_url}/documentList?query={key: value}</p> <p>Such as:</p> <p>http://{base_url}/jmJobList?query={\"job_no\": \"12345\"}</p> <p>Note: The query parameter is supported only for GET and PATCH requests for List type documents and is not supported by GET requests for Setup or Maintenance documents.</p> <p>In the simplest form, the value is a single piece of information, such as a string or integer. In more complex forms, the value is a JSON object containing specific formats as described below.</p> <p>In these examples below, the baseurl is assumed to include the document endpoint e.g \u2018https://example.com/api/v2/database/example/JmJobList\u2019</p>"},{"location":"Using%20the%20REST%20API/11.%20Query%20Parameters/#tip-url-encoding-of-special-characters-eg-and","title":"TIP: URL encoding of special characters e.g. % and +","text":"<p>When using HTML special characters as part of the query value, they must be URL encoded.</p> <p>Example:\u00a0\u00a0to use a wildcard query such as \"%dave%\", the % needs substituting with %25. \u00a0Once URL encoded will look like this %25dave%25</p> <p>Example GET query with URL encoded wildcard :</p> <p>{{server}}/MoMediaOrderList?query={\"wo_desc\":\"%25dave%25\"}&amp;resultcolumns={\"L\": [\"wo_no\", \"wo_desc\"]}</p> <p>(Specifically the reason why\u00a0%dave% fails to return valid results it that %da\u00a0is the encoding for the\u00a0\u00da character)</p> <p>This also applies to datetime values that use the offset attribute with the + sign.</p> <p>To include a value of \"2023-06-01T09:00+5:00\" in a URL query parameter, substitute + with %2b</p> <p>Example:</p> <p>?query={\"wo_begin_dt\":{\"$range\":[\"2023-06-01T09:00%2b5:00\",\"2023-06-01T17:00%2b5:00\"]}}</p> <ul> <li>String or Number</li> </ul> Description\u00a0The value in returned items must match a specified string. The stringcan either be letters or numbers. Wildcard \u2018%\u2019 can be used.\u00a0Syntax\u00a0\u201cfield\u201d:\u201d value\u201d<p>Examples:</p><p>baseurl?Query={\u201cjob_desc\u201d:\u201d Big Apple Live\u201d}</p><p>baseurl?Query={\u201cjob_desc\u201d:\u201d%Big%\u201d}</p><p>baseurl?Query={\u201cjob_no\u201d:101101}</p> <p>To specify multiple key/value pairs, separate each key/value pair with a comma: baseurl?query={\"cust_id\":\"123\",\"job_type_no\":\"4\"} baseurl?query={\"cust_id\":\"123\",\"job_type_no\":\"4\",\"active\":\"Y\"} Note: When specifying multiple key/value pairs, the API will return only items that match ALL specified criteria.</p> <ul> <li>Range</li> </ul> Description\u00a0The value in returned items must fall between a specified minimumand maximum numeric value.Syntax\u00a0\u201cfield\u201d:{\"$range\":[lower_limit, upper_limit]}Examplesbaseurl?Query={\u201cjob_no\u201d:{\"$range\":[100, 199]}}baseurl?query={\"wo_begin_dt\":{\"$range\":[\"2023-12-01\",\"2023-12-31\"]}}baseurl?query={\"wo_begin_dt\":{\"$range\":[\"2023-06-01T09:00\",\"2023-06-01T17:00\"]}} <ul> <li>In (Set)</li> </ul> Description\u00a0The value in returned items must match one of the values provided in a given set of values.Syntax\u00a0\u201cfield\u201d:{\"$in\":[\u201cvalue_1\u201d,\u201dvalue_2\u201d, \u2026 \u201dvalue_n\u201d]}Examples\u00a0baseurl?Query={\u201cjob_no\u201d:{\"$in\":[100, 105, 110, 119]}} <p>TIP: Searching for multiple wildcard values</p> <p>If you wanted to search for multiple wildcard values contained within a single field that all need to exist, then you can include a list of wildcard values.</p> <p>For example, if you wanted to search for media assets that have \"Tale\" AND \"Dark\" in their \"master_desc\" field, you can use the following query parameter:</p> <p>{\"master_desc\":{$in:[\"%Tale%Dark%\",\"%Tale%Dark%\"]}}</p> <p>Or with encoding of the % symbol (if using Postman) you need:</p> <p>{\"master_desc\":{$in:[\"%25Tale%25Dark%25\",\"%25Tale%25Dark%25\"]}}</p> <ul> <li>Null / Empty</li> </ul> Description\u00a0The value in returned items must be NULL. Note: Put pipe charactersaround NULL to differentiate it from the literal string \u201cNULL\u201d.Syntax\u00a0\"field\u201d: \u201c|NULL|\u201d\u00a0Examples\u00a0baseurl?Query={\u201cphone_number\u201d:{\"|NULL|\"}} <ul> <li>NE (Not Equal)</li> </ul> Description\u00a0The value in returned items must not match the specified number, string, or NULL.Syntax\u00a0\u201cfield\u201d:{\"$ne\":\u201dvalue\u201d}<p>Examples:\u00a0Not equal\u00a0Not null\u00a0\u00a0Not like</p><p>baseurl?Query={\"job_desc \":{\"$ne\":\"Big Apple Live\"}}baseurl?Query={\"cust_id\":{\"$ne\":1001}}baseurl?Query={\"jm_phase_external_key\":{\"$ne\":\"|NULL|\"}}baseurl?Query={\"wo_desc\":{\"$ne\":\"Test%\"},\"wo_type_no\": 83}\u00a0</p> <p>NULL Values</p> <p>The Null parameter returns any record that has a null value for the specified key, which indicates that no value has ever been set. This differentiates it from an empty string for text-based or date-based properties, a 0 value for numbers, and true or false values for Boolean properties.</p> <p>Note: Not all properties support null values. If possible, check whether the database column in the appropriate column allows nulls.</p> <p>Keys are strings and generally match the column name from a given database table. It is recommended to match the case of the key name as shown in the Swagger API documentation if possible.</p> <p>Values</p> <p>- String values are not case-sensitive.</p> <p>- DateTime values should be provided in a valid ISO date format.</p>"},{"location":"Using%20the%20REST%20API/11.%20Query%20Parameters/#resultcolumns-parameter","title":"resultColumns parameter","text":"<p>Used by the GET method on List and (v10.6) Maintenance endpoints.</p> <p>ResultColumns parameter is used to define the fields you wish to have returned in the response. Without this parameter, the response will contain all document fields.</p> <p>For example: {baseurl}/JmJobList?Query={\"job_no\":2}&amp;resultColumns={\"L\":[\"job_no\",\"job_desc\"]}</p> <p>Job No. and Job Description fields will be included in the response. Important to include the \u201cL\u201d top-level element.</p> <p>Sub-Table columns</p> <p>Many endpoints include related sub-tables in their responses. Example syntax to include specific sub-table columns.</p> <p>Below example fetches a tranmission order description and all it's service row numbers:</p> <p>{base_url}/XmTransmissionOrder/wo_no_seq=7655-1?resultColumns={\"jm_work_order\":[\"wo_desc\"],\"mo_service_row\":[\"service_row_no\"]}</p> <p>Response:</p> <p>{</p> <p>\"jm_work_order\": [</p> <p>{</p> <p>\"wo_desc\": \"WS Transmission Test\",</p> <p>\"mo_service_row\": [</p> <p>{</p> <p>\"service_row_no\": {</p> <p>\"service_row_no\": 9933,</p> <p>\"external_key\": null</p> <p>}</p> <p>},</p> <p>{</p> <p>\"service_row_no\": {</p> <p>\"service_row_no\": 9934,</p> <p>\"external_key\": null</p> <p>}</p> <p>}</p> <p>]</p> <p>}</p> <p>]</p> <p>}</p> <p>Performance recomendation. Always use the ResultColumns parameter otherwise responses will return large numbers of fields most of which will not be required and only adds to the system perfromance overhead. In future API versions, this will become a mandatory parameter.</p>"},{"location":"Using%20the%20REST%20API/11a.%20Other%20parameters/","title":"11a. Other parameters","text":""},{"location":"Using%20the%20REST%20API/11a.%20Other%20parameters/#alternatekeyhandling","title":"alternatekeyhandling","text":"<p>Suppresses additional key fields from the responses. If you do not need to work with key fields other than the primary key, use this parameter to keep the API call performant and reduce the processing overhead when not working with alternate key fields (v10.6).</p> <p>Applicable to all GET calls for List, Maintenance &amp; Report endpoints.</p> <p>Values are \u2018ignore\u2019 or \u2018include\u2019.</p> <p>Default value = \u2018include\u2019 (includes alternate keys in the response)</p> <p>Example:</p> <p>URL Parameter:- alternatekeyhandling:include (default) </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915,</p> <p>\"barcode\": \"MM915\",</p> <p>\"external_key\": \"VX-90\",</p> <p>\"umid\": null</p> <p>},</p> <p>\"cust_id\": null,</p> <p>\"company_name\": null,</p> <p>\"master_desc\": null,</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>URL Parameter:- alternatekeyhandling:ignore </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915</p> <p>},</p> <p>\"cust_id\": null,</p> <p>\"company_name\": null,</p> <p>\"master_desc\": null,</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>Notice how the additional key fields barcode, external_key &amp; umid are not provided.</p> <p>It's recommended to always include this header with the value 'ignore', unless working with alternate keys.</p>"},{"location":"Using%20the%20REST%20API/11a.%20Other%20parameters/#nullvaluehandling","title":"nullvaluehandling","text":"<p>Suppresses all null value fields from the response. Using this parameter reduces the payload size dramatically, especially for larger queries (v10.6).</p> <p>Applicable to all GET calls for List, Maintenance &amp; Report endpoints.</p> <p>Values are \u2018ignore\u2019 or \u2018include\u2019.</p> <p>Default value = \u2018include\u2019 (includes null values in the response)</p> <p>Example:</p> <p>URL Parameter:- nullvaluehandling=include (default) </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915,</p> <p>\"barcode\": \"MM915\",</p> <p>\"external_key\": \"VX-90\",</p> <p>\"umid\": null</p> <p>},</p> <p>\"cust_id\": null,</p> <p>\"company_name\": null,</p> <p>\"master_desc\": null,</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>URL Parameter:- nullvaluehandling=ignore </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915,</p> <p>\"barcode\": \"MM915\",</p> <p>\"external_key\": \"VX-90\"</p> <p>},</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>Notice how all null value fields are omitted. It's recommended to always include this parameter with the value 'ignore', unless visibility of null values is required.</p>"},{"location":"Using%20the%20REST%20API/11a.%20Other%20parameters/#source-time-zone-name","title":"Source-Time-Zone-Name","text":"<p>The REST API uses Date time formats in ISO format with an optional offset value.</p> <p>e.g. 2014-11-03T22:20:00+00:00</p> <p>If you omit the offset value when using POST to create a record, you can use a header parameter to set the time zone your dates are using. Key: Source-Time-Zone-Name\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Value: {Windows Time Zone name}</p> <p>e.g. : header 'Source-Time-Zone-Name: Pacific Standard Time '</p> <p>Will create records using Pacific Standard Time as the time zone for the payload times. Remember to omit the offset values in your time formats.</p>"},{"location":"Using%20the%20REST%20API/12.%20Save%20Argument%20Header/","title":"12. Save Argument Header","text":"<p>In some cases, you must also add a header with the SaveArgument parameter to trigger the app server to perform a function as part of an API call. For example, when creating a Work Order, to load a Work Order Template you must provide the wo_template_no value in the payload as well as set the SaveArguement header:</p> <p>LoadTemplate: SaveArgument : {\"LoadTemplate\":\"2\"}</p> <p>LoadServiceTemplate, loads a service template to a Media Order or a Transmission Order:</p> <p>SaveArgument : {\"LoadServiceTemplate\":\"10\"}</p> <p>BidApproval, changes the bid approval state of a Bid using an number that maps to the approval</p>"},{"location":"Using%20the%20REST%20API/12.%20Save%20Argument%20Header/#saveargument-bidapproval0","title":"SaveArgument : {\"BidApproval\":\"0\"}","text":"<p>Approval number mapping:</p> 0Approval1Unapproval2ApproveAsChangeMemo3ApproveAndUnApproveOriginal4Abort"},{"location":"Using%20the%20REST%20API/13.%20Examples/","title":"13. Examples","text":""},{"location":"Using%20the%20REST%20API/13.%20Examples/#patch-using-post-payload","title":"PATCH Using POST Payload","text":"<p>There are two PATCH methods, one where you define the field and the operation, the other is to use the full POST JSON payload.</p> <p>To use the PATCH with the full JSON payload, you must include the header parameter:</p> <p>'Content-Type: application/json-patch+json'</p> <p>Example Job update (cURL format):</p> <p>curl --location --request PATCH</p> <p>'https: //{base_url}/api/v2/database/{database_name}/JmJob/job_no=345' \\</p> <p>--header\u00a0'Content-Type:\u00a0application/json-patch+json'\u00a0\\</p> <p>--header\u00a0'Authorization:\u00a0Basic\u00a0eHl0ZWNoOk1lZGlhMjwqNSE='\u00a0\\</p> <p>--data\u00a0'{</p> <p>\"jm_job\":\u00a0[</p> <p>{</p> <p>\"job_no\":\u00a0{</p> <p>\"job_no\":\u00a0345</p> <p>},</p> <p>\"job_desc\":\"Leaves\u00a0of\u00a0October\",</p> <p>\"job_type_no\":\u00a0{</p> <p>\"job_type_no\":\u00a07</p> <p>},</p> <p>\"po\":\u00a0\"PO1234\",</p> <p>\"job_reference\": \"Streets\u00a0Ahead\"</p> <p>}</p> <p>]</p> <p>}'</p> <p>Notes:</p> <p>The payload must include the existing primary key (job_no in the above example) as a URL parameter as well as in the body payload.</p> <p>The expected response status code for a successful PATCH is \u2018204\u2019 and there will be no response body.</p>"},{"location":"Using%20the%20REST%20API/13.%20Examples/#patch-using-list-endpoints","title":"PATCH using List endpoints","text":"<p>List endpoints also support the PATCH method so that you can update multiple records using a query (see \u2018GET \u2013 Query Parameters\u2019 section above for details on available query parameters). This method is teh equilivant API functionality of Grid Update feature of the UI. Example to update multiple jobs using the $in query parameter:</p> <p>PATCH {base_url}/JmJobList?query={\"job_no\": {\"$in\": [\"410\",\"411\"]}}</p> <p>[</p> <p>{</p> <p>\"op\":\u00a0\"replace\",</p> <p>\"path\":\u00a0\"job_reference\",</p> <p>\"value\":\u00a0\"These\u00a0are\u00a0not\u00a0taxed\"</p> <p>}</p> <p>]</p> <p>As\u00a0with\u00a0GET,\u00a0wildcards\u00a0\u2018%\u2019\u00a0are\u00a0supported\u00a0such\u00a0as:</p> <p>PATCH {base_url}__/\u00a0JmJobList?Query={\"job_desc\":\u00a0\"Sport%\"}</p>"},{"location":"Using%20the%20REST%20API/13.%20Examples/#post-method","title":"POST method","text":"<p>Mandatory Fields to Create New Items</p> <p>The Swagger model identifies many fields as mandatory (nullable: false), which indicates that a value must be provided when the item is written to the database. However, in some cases, the business logic will provide default values, so it may not be strictly necessary to pass values for these fields to the API to create a new record.\u00a0 For example, in a basic payload to create a Work Order, Swagger identifies at least 25 fields as mandatory, but the most basic payload to create a Work Order is below:</p> <p>{</p> <p>\"jm_work_order\":\u00a0[</p> <p>{</p> <p>\"external_key\":\u00a0\"externalID\",</p> <p>\"wo_desc\":\u00a0\"Match2\",</p> <p>\"wo_begin_dt\":\u00a0\"2022-01-01T00:00\",</p> <p>\"wo_end_dt\":\u00a0\"2022-01-01T06:00\",</p> <p>\"wo_type_no\":\u00a02,</p> <p>\"phase_code\":\u00a0\"Bid\",</p> <p>\"rate_card_no\":\u00a01,</p> <p>\"cust_id\":\u00a0\"6\",</p> <p>\"wo_template_no\":\u00a0\"2\"</p> <p>}</p> <p>]</p> <p>}</p> <p>See other basic payload examples in the public Postman Collection.</p>"},{"location":"Using%20the%20REST%20API/14.%20Custom%20field%20handling/","title":"14. Custom field handling","text":"<p>Any custom fields you have defined through document customization are automatically included in REST API payloads. The naming convention is a combination of the Custom Code you created plus the internal field name concatenated with an underscore. i.e. {customization code}_{field name}</p> <p>Document customization screen showing the Customnization Code</p> <p></p> <p>Document customization screen showing the internal field names:</p> <p></p> <p>Response from a GET call to fetch a Work Order showing the payload custom fields:</p> <p></p>"},{"location":"Using%20the%20REST%20API/2.%20What%27s%20new/","title":"2. What's new","text":""},{"location":"Using%20the%20REST%20API/2.%20What%27s%20new/#whats-new-v11","title":"What's new v11","text":""},{"location":"Using%20the%20REST%20API/2.%20What%27s%20new/#user-permissions","title":"User permissions","text":"<p>Know limitations - When Divisions are enabled, REST API will always use the users default division Enable a user for REST API access Assign security roles or enable as a super user.</p>"},{"location":"Using%20the%20REST%20API/2.%20What%27s%20new/#upsert-is-now-supported","title":"upsert is now supported","text":"<p>PUT on all maintenance document types. Delete all sub tables parameters. https://dev.azure.com/xytsystems/Xytech%20Platform/_workitems/edit/16791 https://dev.azure.com/xytsystems/Xytech%20Platform/_workitems/edit/16076 Verify that as an API user (using Postman) that by including the header for the PUT method:  RowAction  with a value of: <code>{\"DeleteAll\":[\"&lt;sub table name&gt;\",\"&lt;sub table name&gt;\"]}</code></p> <p>all existing values in the sub table get deleted for the upsert record.</p> <p>e.g. endpoint /LibMaster RowAction value: {\"DeleteAll\":[\"lib_master_audio\"]} Will delete all existing lib_master_audio records (and add new ones if defined in the payload)</p> <p>Verify that multiple sub tables can be defined. Verify a selection of documents with sub tables are tested.</p>"},{"location":"Using%20the%20REST%20API/2.%20What%27s%20new/#gzip-compression-is-now-supported","title":"Gzip Compression is now supported","text":"<p>https://dev.azure.com/xytsystems/Xytech%20Platform/_workitems/edit/17627</p> <p>By adding the header Accept-Encoding:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 gzip\u00a0 or deflate Applies to all API methods.</p> <p>Example: To fetch a list of transactions for a date range. Without compression: Takes 5 seconds and a payload of 4.4 MB. With compression: Takes 4 seconds and a payload of 142 KB. Without compression: 22 seconds with response size of 9.47 MB With compression: 8 seconds with response size of 320 KB ~a 30th of the size. Recommend to always use compression.</p>"},{"location":"Using%20the%20REST%20API/2.%20What%27s%20new/#added-query-parameters-for-greater-than-and-less-than","title":"Added query parameters for greater than and less than","text":"<p>You can now use query parameters with:</p> <ul> <li>LessThanOrEqual ($lte)</li> <li>LessThan\u00a0($lt)</li> <li>GreaterThanOrEqual\u00a0($gte)</li> <li>GreaterThan\u00a0($gt)</li> </ul> <p>e.g. Title numbers greater than 106438</p> <p>{\"title_no\":{\"$gt\": \"106438\"}}</p> <p>\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 notIn</p> <p>Usage example: {{server}}/PmProjectList?query={\"project_desc\":{\"$notin\":[\"test\", \"Sarah\"]}}</p>"},{"location":"Using%20the%20REST%20API/2.%20What%27s%20new/#ability-to-use-resultcolumns-for-sub-table-filtered-urls-of-maintenance-docs","title":"Ability to use resultColumns for sub-table filtered URLs of maintenance docs.","text":"<p>https://dev.azure.com/xytsystems/Xytech%20Platform/_workitems/edit/20597</p> <p>REST API\u00a0 -\u00a0When calling a maintenance document using a GET call with a URL sub-table filter , you can now apply the 'resultColumns'\u00a0 parameters to define the fields returned in the response body. Previously the resultColumns parameter was only respected for the primary table without a sub-table filter.\u00a0</p> <p>e.g.\u00a0{{server}}/JmJob/job_no=342/jm_episode?resultColumns={\"jm_episode\":[\"title_no\"]} </p> <p>Will return only the title_no values for job 342</p> <ol> <li>Verify GET resultColumns for URL /document/sub-table filter</li> </ol> <p>{{server}}/XmTransmissionOrder/wo_no_seq=1072992-1/mo_service_row?resultColumns={\"mo_service_row\":[\"service_row_no\"],\"mo_operation\":[\"operation_no\",\"service_row_no\",\"task_desc\"]}</p> <p>Verify that when I apply a URL sub-table filter to a maintenance document GET call, I can use the resultColumns parameter to return specific fields from the sub-sub-table.</p> <p>2. Verify GET resultColumns for /document/sub-table/sub-sub-table filter</p> <p>{{server}}/XmTransmissionOrder/wo_no_seq=1072992-1/mo_service_row/service_row_no=221083/mo_operation/operation_no=133119?resultColumns={\"mo_operation\":[\"operation_no\",\"task_no\"]}</p> <p>Verify that when I apply a URL sub-sub-table filter\u00a0to a maintenance document GET call,\u00a0I can use the resultColumns parameter to return specific fields from the sub-sub-table.</p> <p>(Used MAIN_RUBY_V for the above examples)</p>"},{"location":"Using%20the%20REST%20API/2.%20What%27s%20new/#save-arguments","title":"Save Arguments","text":"<p>Table 1</p> Endpoint Save Argument /SchResource GroupCode <p>https://dev.azure.com/xytsystems/Xytech%20Platform/_workitems/edit/9976</p> <p>Sets the default Group for a Resource.</p> <p>The Group must already be assigned to the Resource.</p> <p>Use a PATCH call where the body does not need to change any values, but needs to exist for the call to work.</p> <p>curl --location --request PATCH 'https://devwcumpapp2.xytech.xytechsystems.com/xyt_main/api/v2/database/XYT_MAIN_V/SchResource/resource_code=UKTECH01' \\ --header 'Content-Type: application/json' \\ --header 'SaveArgument: {\"GroupCode\":\"UKPS\"}' \\ --header 'Authorization: Basic eHl0ZWNoOnh5dGVjaHB3' \\ --data '[ \u00a0 \u00a0 { \u00a0 \u00a0 \u00a0 \u00a0 \"op\": \"replace\", \u00a0 \u00a0 \u00a0 \u00a0 \"path\": \"resource_code\", \u00a0 \u00a0 \u00a0 \u00a0 \"value\": \"UKTECH01\" \u00a0 \u00a0 } ]'</p>"},{"location":"Using%20the%20REST%20API/2.%20What%27s%20new/#null-date-values","title":"null date values","text":"<p>Fixed in v10.6SP1 and v11 Creating date fields with null now sets the value to null as opposed to \"0001-01-01T00:00:00\" Applies to POST/PUT/PATCH methods.</p>"},{"location":"Using%20the%20REST%20API/2.%20What%27s%20new/#summary-of-whats-new-in-v106","title":"Summary of what's new in v10.6","text":"<ul> <li>Swagger documentation now includes the PATCH method using a POST payload</li> <li>Swagger includes example payloads for sub-tables (previously not populated).</li> <li>Swagger now includes PATCH method for list documents.</li> <li>Other Swagger improvements and correct missing parameter fields.</li> <li>Additional header parameters for optimization and filtering<ul> <li>Ignore alternate keys</li> <li>Omit null values</li> <li>Filter results for maintenance documents</li> </ul> </li> </ul>"},{"location":"Using%20the%20REST%20API/3.%20Definitions/","title":"3. Definitions","text":"PlatformMedia Operations Platform application\u00a0APIApplication Program Interface is a set of functions or procedures offered by a host system that allows one or more applications, services, or systems to send information to, request information from, or make changes to the host system.RESTRepresentational State Transfer is an architectural style of principles that define a set of constraints for how two systems can communicate over a network such as the World Wide Web. The REST architecture is described in REST BasicsVerbIn REST, this is the programmatic method used to initiate an API command, usually GET, PUT, POST, or DELETE. See also HTTP Methods for more information.SwaggerA third-party tool that generates API documentation automatically based on the Open API specification. It presents a browsable, usable Web site as a URL within the API Web service. See also Open API.cURLcURL is a mechanism for transferring data using networking protocols. It is provided in two ways:\u2022 As a command line tool that allows a user to submit requests directly and see the results, usually for testing purposes.\u2022 As a library with integrations to several common programming languages, including C++, C#, PHP, and others.ModelA collection of properties, usually defined as name/value pairs or collections of name/value pairs, that make up a document or a portion of a document. An API may accept one or more models as input, to create a new record or modify an existing record using all the specified values. An API may also provide one or more models as output, either as a list of identical models (e.g., retrieving multiple records as part of a list document) or as a collection of related models (e.g., retrieving all models related to a particular Job document).Postman<p>A third-party platform for building and testing APIs; the Postman client application is available on several operating systems and provides a set of tools to test API calls without having to write code and helps debug API calls and response payloads. https://www.postman.com/</p>OAS,OpenAPIFormerly known as Swagger Specification, the OpenAPI Specification (OAS) defines a standard interface to RESTful APIs. This language-agnostic interface can then be used by code generation, documentation generation, and testing tools to access and understand the underlying API.\u00a0Refer to https://swagger.io/specification/ for more information."},{"location":"Using%20the%20REST%20API/4.%20Methods%20and%20response%20codes/","title":"4. Methods and response codes","text":"<p>RESTful services utilize HTTP methods to differentiate between different types of API calls.</p> VerbCommunity Used ForGET\u00a0Usually retrieves a representation of the resource\u2019s current state, such as performing a simple query that gathers and returns information about one or more resources (e.g., database records) from the host system.In the Platform API, GET commands are used to retrieve setup documents, maintenance documents, or list documents.Examples include:Retrieving a list of all records of a certain document type, such as all Bids, all Jobs, or all Contacts in the system,<ul><li>Retrieving a list of all records of a certain document type that match specified criteria, such as all Bids that start in the current year, all Jobs associated with a specific Client, or all Contacts whose names begin with the letter A, or</li><li>Retrieving a specific record of a certain document type, such as all the properties of a Job with a specific Job ID.</li></ul>Note: A GET command is entirely contained within the URI sent to the endpoint. As a result, there is a limit on the amount of text that can be sent to the API, so GET commands usually do not support a significant amount of search or filter criteria.PATCHPatch usually updates an existing state with a specified one using partial information. See also PUT to completely replace an existing state, and POST for updating an existing state in some cases. In the Platform API, usually updates an existing record, such aschanging the mailing address of a Contact or changing the status of a Job.POSTPost usually processes the representation provided with the request to create a new representation or update an existing representation.\u00a0In the Platform API, POST commands are usually used to create new records, such as adding a new resource or creating a new Job.PUTPut usually updates an existing record by completely replacing an existing state with a specified one or creating a new state where the URI is already known. See also PATCH to replace only a portion of an existing state. In the Platform API, PUT commands will be used to perform upsert calls from v11; refer to POST commands for creating new items or PATCH commands for updating existing items.DELETEDelete commands are usually used to permanently remove existing records from the host system.\u00a0Note: DELETE commands should be used sparingly; to both preserve data integrity and provide historical information, it is usually recommended to change the Status of a record instead of deleting the record completely. <p>Response Codes</p> <p>REST services are built on top of the HTTP protocol, so calls to the REST service generate HTTP response codes. In many cases, the HTTP response code will be accompanied by additional information in the header or body of the message. In some cases, the HTTP response code may be the only response.</p> Response Code\u00a0Description2xx range\u00a0Success Codes200 OkThe call was successful. In most cases, there will be additional information returned by the API in the body of the message, such as the matching record(s) for a query, or the ID of a record created, modified, or deleted by a corresponding API call.204 No ContentThe server has fulfilled the request but does not need to return a response body. The server may return the updated meta information.4xx range\u00a0Client Error400 Bad RequestThe call was not successful due to an error in the URL or the syntax of the API call. Check the syntax of the API call to make sure there are no invalid characters.401 UnauthorizedThe call was not successful because the API requires a validcredentials, and they were not provided as part of the call.Response Code Description Verify that the call is providing login information in an acceptable manner.404 Not FoundThe call was not successful because the service could not find the requested API. Check the URL for any mismatches between the API call being sent and the documented API signature.5xx range\u00a0Server Error500 Internal Server ErrorThe call was not successful because it caused an error in the service during processing, such as providing an incorrect data type for a given property/field. Verify that all parameters are correct, and values are valid.502 Bad GatewayThe call was not successful because the service got an invalid response from the API. Verify that all parameters are correct, and values are valid. <p>For more information refer to the appropriate section of the HTTP protocol or a developer resource for HTTP status codes, such as the MDN Web Docs.</p>"},{"location":"Using%20the%20REST%20API/5.%20Fundamentals%20and%20data%20model/","title":"5. Fundamentals and data model","text":"<p>The Platform is, at a fundamental level, a system that deals with creating, updating, and utilizing a particular type of data object referred to as a document.</p> <ul> <li>Each Platform document is a representation of a database table or collection of database tables.<ul> <li>Each document has a primary table and may have one or more sub-tables.</li> <li>All sub-tables are children of the primary table, and a sub-table can have one or more child sub-tables.</li> </ul> </li> <li>Each document is one of the following types of documents:<ul> <li>Setup - generally describes a single item, and usually only contains a primary table. Setup documents are often used to manage simple items used to generate lists of options in other documents, such as status labels or predefined sets of codes.</li> <li>Maintenance \u2013 generally describes either master data (which are used in transactional data) or transactional data. Maintenance documents often contain one or more sub-tables.</li> <li>List documents provide access to sets of other records, such as Setup and Maintenance documents.</li> </ul> </li> </ul> <p>The Platform REST API is JSON-based and has Open API v3.0 API specifications for each API call available in YAML. These specifications can be retrieved as a plain YAML file and are also readily available to be viewed in a browser through the Swagger UI. See the Error! Reference source not found. below for more information.</p>"},{"location":"Using%20the%20REST%20API/5.%20Fundamentals%20and%20data%20model/#high-level-data-model-diagram","title":"High level data model diagram","text":"<p>This diagram provides you with a high-level understanding of the primary Xytech Platform data objects and how they relate.</p> <p>Below the name of each data object is the REST API endpoint used for accessing the data object. Where ~/ is prefixed before the endpoint, that indicates it is a sub-table endpoint of the primary endpoint. See the Swagger documentation for full details.</p>"},{"location":"Using%20the%20REST%20API/5.%20Fundamentals%20and%20data%20model/#_1","title":"5. Fundamentals and data model","text":""},{"location":"Using%20the%20REST%20API/6.%20REST%20API%20v1%20and%20v2/","title":"6. REST API v1 and v2","text":""},{"location":"Using%20the%20REST%20API/6.%20REST%20API%20v1%20and%20v2/#deprecation-of-v1-api","title":"Deprecation of v1 API","text":"<ul> <li>REST API v1 was the first Xytech REST API product. It had limitations that required breaking changes to improve so v2 was made available from Xytech v9.4 release with improved functionality.</li> <li>REST API v1 will no longer be supported in version 11.0 and beyond.</li> <li>All new integrations should use v2 API and existing integrations should port to v2</li> <li>To use v2 API, change the base URL version number from ../v1/.. to ../v2/..</li> </ul>"},{"location":"Using%20the%20REST%20API/6.%20REST%20API%20v1%20and%20v2/#additional-features-in-v2-api-as-of-platform-v102-release","title":"Additional Features in v2 API (as of Platform v10.2 release)","text":"<ul> <li>Payload structure is enhanced and updated to be more robust and scalable.     The document name is now always added as the root element of the payload with an array containing the details.\u00a0</li> </ul> <p>Example showing the additional root element jm_job: </p> API V1 JSON payload for GET JmJob<p>API V2 JSON payload for GET JmJob</p> <p>/JmJob/job_no=11261</p><p></p><p>/JmJob/job_no=11261</p><p></p> <ul> <li> <ul> <li>See the Swagger documentation for details of the JSON structure for each endpoint.</li> </ul> </li> <li> <p>Additional PATCH capabilities In addition to the existing v1 PATCH method where each changed field must be defined using the operation/path/value payload structure, you can now use the same JSON payload you would use for a POST call to update a record. This needs to use the header 'Content-Type: application/json-patch+json'. See the section below for more details.</p> </li> <li> <p>Pagination &amp; sorting API Pagination has been added to the REST API \u2018Get\u2019 Query for Lists. Parameters for:</p> <p><p>pageSize\u00a0</p>are the number of records returned per page.\u00a0pageare the page number to return.\u00a0<p>sort </p>is the field to sort by followed by ascending or descending order.\u00a0</p> <p>Example: To return the first 10 records on page 1 sorted by product_no: GET {server}}/JmOrgProductList?query=\"active\":\"Y\"}&amp;resultColumns=\"L\":\"product_no\",\"product_desc\"]}&amp;sort=\"product_no_desc\"]&amp;pageSize=10&amp;page=1</p> <p>This will allow sites to call for data in manageable payloads without exceeding memory limitations.</p> </li> </ul>"},{"location":"Using%20the%20REST%20API/7.%20Swagger%20documentation/","title":"7. Swagger documentation","text":"<p>From Platform version v10.2, a Swagger index page has been introduced to assist in the navigation and creation of Swagger YAML documentation. The Swagger index page can be found by entering the base URL you use for accessing the Platform and adding \u201c/ApiDocs\u201d to the end (e.g., www.xytechexample.com/XYT_TEST/ApiDocs). The Xytech API Index page is displayed.\u00a0</p> <p></p> <p>Using the Index The Index is comprised of the following areas:</p> <ul> <li>Version: Displayed in the upper left corner of the screen. This shows the API version, currently either v1 or v2.</li> <li>Selected Database: The name of the database currently selected for this host.     Only modules for that database are shown.</li> <li>Available Databases: (Where multiple databases exist on the same host) Click a database to select it and view its associated modules.</li> <li>Filter Documents: Enter text into this field and press [Enter] to only display matching document descriptions. To clear the filter, delete the text and press [Enter].</li> <li>Module and Document List: Only modules in the selected database are displayed. Click any Module to expand and show the documents it contains. Each document has a label that describes its type (Document [maintenance], List, or Setup).</li> </ul>"},{"location":"Using%20the%20REST%20API/7.%20Swagger%20documentation/#for-versions-prior-to-v102","title":"For versions prior to v10.2","text":"<p>For versions prior to v10.2 you will need to generate the Swagger documentation manually for each document endpoint.</p> <p>Use a browser to generate the Swagger document:</p> <p>http://{host}:{port}/API/v2/database/{db_name}/spec/{docName}</p> <p>For example:</p> <p>http://myhost:8088/API/v2/database/mp10/spec/JmJob</p> <p>The above URL will generate the Swagger document and then display the Swagger document.</p> <p>To display generated Swagger documents, browse to:</p> <p>http://{host}:{port}/REST/SwaggerUI/dist/index.html?document={docName}_v2</p> <p>For example:</p> <p>http://myhost:8088/REST/SwaggerUI/dist/index.html?document=JmDivision_v2</p>"},{"location":"Using%20the%20REST%20API/8.%20Connecting%20and%20Authenticating/","title":"8. Connecting and Authenticating","text":""},{"location":"Using%20the%20REST%20API/8.%20Connecting%20and%20Authenticating/#licensing","title":"Licensing","text":"<p>While there is a specific license point for the REST API, by default all Platform installations are given access to the API.</p> <p>The REST API is a component of the Platform\u2019s Application Server. On hosted systems, it is available by default to all customers.</p>"},{"location":"Using%20the%20REST%20API/8.%20Connecting%20and%20Authenticating/#instance-information-you-will-need","title":"Instance Information You Will Need","text":"<p>To be able to connect with the REST API, you will need to know the instance:</p> <ul> <li>Base URL e.g. \u2018https://example.com\u2019 (The same base url you use to access your system)</li> <li>Database name e.g. \u2018DEMO1\u2019</li> </ul> <p>For systems installed prior to mid 2023, you may also require the port number. All later systems are now setup with a proxy to avoid the need to know the port number.</p> <p>If you do not have this information, please contact Xytech Technical Support.</p>"},{"location":"Using%20the%20REST%20API/8.%20Connecting%20and%20Authenticating/#authenticating","title":"Authenticating","text":"<p>The REST API currently uses Basic Authentication and will require a database login account. Always use HTTPS encrypted protocol when communicating with the REST API to ensure credentials are not passed in clear text.</p>"},{"location":"Using%20the%20REST%20API/9.%20Using%20Postman%20and%20CURL/","title":"9. Using Postman and CURL","text":"<p>This section describes using the third-party Postman application as an API client for testing and troubleshooting purposes. The example uses the JmJob (Job) endpoint.</p>"},{"location":"Using%20the%20REST%20API/9.%20Using%20Postman%20and%20CURL/#xytech-public-postman-collection","title":"Xytech Public Postman Collection","text":"<p>An extensive set of example API calls is available via the Platform\u2019s REST API Postman Collection. This collection contains example calls for three types of documents (maintenance, list, and setup).\u00a0</p> <p>We suggest forking the collection to your own workspace which enables you to 'pull' for updates as the collection grows.</p> <p>To execute a GET call to retrieve an existing record:</p> <ol> <li>Open the Postman application</li> <li>From File click New and click HTTP Request</li> <li>Leave the method as GET</li> <li>Enter the URL:  <ul> <li>http://{base_url}/API/v2/database/{dbname}/jmJob/job_no=100\u00a0<ul> <li>Replace {base_url} &amp; {dbname} with your base URL &amp; database name and provide a valid Job Number that exists in your instance.</li> </ul> </li> </ul> </li> <li>On the Authorization tab, set Type to Basic Auth and enter a valid username and password, e.g. xytech/xytechpw</li> <li>Click Send and observe the response.</li> </ol> <p>To execute a POST call to create a new record: </p> <ol> <li>Open the Postman application.</li> <li>From File click New and click HTTP Request.</li> <li>Change the method to POST.</li> <li>Add a Header:<ul> <li>Key: Content-Type</li> <li>Value: application/json</li> </ul> </li> <li>Enter the URL: http://{base_url}/API/v2/database/{dbname}/jmJob</li> <li>On the Authorization tab, set Type to Basic Auth and enter a valid username and password, e.g. xytech/xytechpw</li> <li>On the Body tab, set the type to json, and provide a valid JSON object with the minimum fields to create a job. For example, to create a simple Job:</li> </ol> <p>{</p> <p>\"jm_job\": [</p> <p>{</p> <p>\"cust_id\": {</p> <p>\"list_id\": \"409\"</p> <p>},</p> <p>\"job_desc\": \"Passing Fancy\",</p> <p>\"job_no\": {</p> <p>\"job_no\": -1</p> <p>},</p> <p>\"job_type_no\": {</p> <p>\"job_type_no\": 11</p> <p>}</p> <p>}</p> <p>]</p> <p>}</p> <p>NOTES:</p> <ul> <li> <ul> <li>To generate the primary key job_no, set the value to -1.         When creating multiple sub-records in a single call, subsequent records must advance the primary key ID by -1. E.g -1, -2, -3 etc\u2026</li> <li>Be aware some fields are mandatory such as Job Type (job_type_no) and Customer ID (list_id).</li> <li>Numeric values will be accepted with or without quotes.</li> </ul> </li> </ul> <p>8. Click Send and observe the response with status code 200 (success with response body).</p> <p>The id of the created record is returned in a header parameter called 'Location'.</p> <p>In v10.6 SP1 a response payload will contain the ID(s) of newly created records.</p> <p>To execute a DELETE call to remove an existing record:</p> <ol> <li>Open the Postman application.</li> <li>From File click New and click HTTP Request.</li> <li>Change the method to DELETE.</li> <li>Enter the URL:     http://{base_url}/api/v2/database/{dbname}/JmJob/job_no=67982</li> <li>On the Authorization tab, set Type to Basic Auth and enter a valid username and password, e.g. xytech/xytechpw</li> <li>Click Send and observe the response with status code 204 (success with no response body).</li> </ol>"},{"location":"Using%20the%20REST%20API/9.%20Using%20Postman%20and%20CURL/#using-curl-as-a-test-client","title":"Using cURL as a test client","text":"<p>This section describes using the third-party cURL command line utility as an API client for testing and troubleshooting purposes.\u00a0</p> <p>Many REST clients (either via an online tool or desktop application) use a lightweight program called curl to interact over many different types of network protocols (including HTTP, HTTPS, FTP, IMAP, etc.) Windows users may use the curl command from the Command Prompt to call teh REST API and output dumps of useful data.</p> <p>Curl is included with Windows v10 1803 and later.</p> <p>Example curl on Windows to fetch job details and download the response to a file (replace credentails, base url and database name with your values:</p> <pre><code>curl -u xytech:password &lt;a href=\"https://{base/\"&gt;https://{base_&lt;/a&gt;url}/api/v2/database/{database name}/JmJob/job_no=342 -H \"Accept: application/json\" &amp;gt;c:\\temp\\ApiResponse.txt\n</code></pre>"},{"location":"Using%20the%20REST%20API/Appendix%20A.%20Endpoint%20list/","title":"Appendix A. Endpoint list","text":"<p>There are over 1000 individual documents (endpoints) available to the Platform\u2019s REST API. Below is a small sample of those documents. The full list of available documents can be obtained directly from the Platform using the Document Customizations query found in the System module. Specific documentation on each document can be found via the Swagger site.</p> ID\u00a0Class Name\u00a0Document Description\u00a0Document Type10315\u00a0JmJob\u00a0Job\u00a0Maintenance315\u00a0JmJobList\u00a0Jobs\u00a0Select (List)10317\u00a0JmJobStatus\u00a0Job Statuses\u00a0Setup10318\u00a0JmJobTable1\u00a0Subscription\u00a0Setup10322\u00a0JmJobType\u00a0Job Types\u00a0Setup359\u00a0JmTrxReport\u00a0Transaction Reports\u00a0Select (List)10339\u00a0JmWorkOrderWork Order\u00a0Maintenance10346\u00a0JmWoTransaction\u00a0Work Order Transactions\u00a0Maintenance"},{"location":"Webhooks/Webhooks%20additions%20v11/","title":"Webhooks additions v11","text":"<p>Response payload parsing and storing of values. 16326</p>"},{"location":"Webhooks/Webhooks%20additions%20v11/#summary","title":"Summary","text":"<p>Web hooks includes the ability to store a value(s) received in the response body back into a field from the triggered document.</p> <p>This allows Xytech to store the ID generated by an external system as a result of a web hook POST that creates the record.</p>"},{"location":"Webhooks/Webhooks%20additions%20v11/#details","title":"Details","text":"<p>Supports scalar and single values to be read and stored. Not arrays or JSON objects. If you don\u2019t specify a content type, the default will be plain text. Mandatory for response to include content type header: \u2018Content-Type\u2019 of either  \u2022   application/json  \u2022   application/xml  \u2022   text/plain.  Can only store values back into the originating document, not related documents.</p>"},{"location":"Webhooks/Webhooks%20additions%20v11/#setup-configuration","title":"Setup Configuration","text":""},{"location":"Webhooks/Webhooks%20additions%20v11/#export-adaptor","title":"Export Adaptor","text":"<p>The Export adaptor now includes \u2018Response Format\u2019 parameter to define the expected response format.</p> <p>Includes Notes and Blob base64 image values.</p> <p>Figure 1 - Response Format  </p>"},{"location":"Webhooks/Webhooks%20additions%20v11/#event-trigger","title":"Event Trigger","text":"<p>The Event Trigger includes a new field to define the Export Adaptor\u2019s \u2018Response Parsing Template\u2019. Here you will add the parse criteria in the format of <code>&lt;database field&gt; = &lt;parse field&gt;</code>.</p> <p>Figure 2 - Response Parsing Template </p>"},{"location":"Webhooks/Webhooks%20additions%20v11/#parse-json","title":"Parse JSON","text":"<p>Example Response payload:</p> <pre><code>{\n    \"data\": {\n        \"desc\": \"This is sample description.\",\n        \"id\": \"ABCEFJ23454\"\n    }\n}\n</code></pre> <p>To retrieve the \u2018id\u2019 value a response template would contain: [table.column] = data.id</p> <p>If the originating document was Title and you wanted to store the value into \u2018external_key\u2019, then the full example would look like this: [lib_title.external_key] = data.id</p> <p>You can store more than one value from the response payload:  e.g.: [table.field1] = data.id [table.field2] = data.desc</p>"},{"location":"Webhooks/Webhooks%20additions%20v11/#parse-xml","title":"Parse XML","text":"<p>To parse an XML response, use  XPATH syntax. W3Schools XPath tutorial: https://www.w3schools.com/xml/xpath_intro.asp</p> <p>Simple parse: [lib_title.external_key] = response/desc</p> <p>An attribute of an element: [lib_title.external_key] = catalog/book/@id     </p> <p>Return all values under /response [lib_title.title_desc_2] = response</p> <p>[lib_title. title_desc_2] = catalog/book[@id='bk102']/title</p> <p>Example XML:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;catalog&gt;\n     &lt;book id=\"bk101\"&gt;\n        &lt;author&gt;Gambardella, Matthew&lt;/author&gt;\n        &lt;title&gt;XML Developer's Guide&lt;/title&gt;\n        &lt;genre&gt;Computer&lt;/genre&gt;\n        &lt;price&gt;44.95&lt;/price&gt;\n        &lt;publish_date&gt;2000-10-01&lt;/publish_date&gt;\n        &lt;description&gt;An in-depth look at creating applications \n        with XML.&lt;/description&gt;\n     &lt;/book&gt;\n     &lt;book id=\"bk102\"&gt;\n        &lt;author&gt;Ralls, Kim&lt;/author&gt;\n        &lt;title&gt;Midnight Rain&lt;/title&gt;\n        &lt;genre&gt;Fantasy&lt;/genre&gt;\n        &lt;price&gt;5.95&lt;/price&gt;\n        &lt;publish_date&gt;2000-12-16&lt;/publish_date&gt;\n        &lt;description&gt;A former architect battles corporate zombies, \n        an evil sorceress, and her own childhood to become queen \n        of the world.&lt;/description&gt;\n     &lt;/book&gt;\n&lt;/catalog&gt;\n</code></pre> <p>[lib_title.external_key] = catalog/book/@id     returns the first id [lib_title.title_desc_2] = catalog/book[@id='bk102']/title  returns null [lib_title.note_no_text] = catalog/book     returns all values from the first item only \u2013 expected both items.</p>"},{"location":"Webhooks/Webhooks%20additions%20v11/#parse-text","title":"Parse Text","text":"<p># v10.6 Known limitations - Export Adaptor - Unable to add a custom Header that is generated by default, such a Content-Header e.g. when trying to add a Header of application/json-patch+json - Export Adaptor - unable to define a JSON template that opens with square brackets e.g. [] as used in a PATCH call to the Xytech REST API</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/","title":"Media Operations Platform REST API Reference   10.6 \u2013 Xytech Systems","text":""},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#introduction","title":"Introduction","text":"<p>This document describes the Media Operations Platform REST API, which is the interface by which a third-party component can make REST calls over HTTP to the Platform application server endpoint and receive responses from it. It does not cover any of the following topics:</p> <ul> <li>Web Hooks \u2013 please refer to the following article called Webhooks user guide 10.4. </li> <li>The Platform SOAP API</li> <li>Platform Service Order Adapters</li> <li>Other outbound interfaces, such as alternate authentication systems.     Although most of this document is relevant to the v1 API, it also includes features that only exist in the v2 API and are primarily intended for users of the v2 API.</li> </ul>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#summary-of-whats-new-in-v106","title":"Summary of what's new in v10.6","text":"<ul> <li>Swagger documentation now includes the PATCH method using a POST payload.</li> <li>Swagger includes example payloads for sub-tables (previously not populated).</li> <li>Swagger now includes PATCH method for list documents.</li> <li>Other Swagger improvements and correct missing parameter fields.</li> <li>Additional header parameters for optimization and filtering<ul> <li>Ignore alternate keys</li> <li>Omit null values</li> <li>Filter results for maintenance documents</li> </ul> </li> </ul>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#definitions","title":"Definitions","text":"PlatformMedia Operations Platform application\u00a0APIApplication Program Interface is a set of functions or procedures offered by a host system that allows one or more applications, services, or systems to send information to, request information from, or make changes to the host system.RESTRepresentational State Transfer is an architectural style of principles that define a set of constraints for how two systems can communicate over a network such as the World Wide Web. The REST architecture is described in REST BasicsVerbIn REST, this is the programmatic method used to initiate an API command, usually GET, PUT, POST, or DELETE. See also HTTP Methods for more information.SwaggerA third-party tool that generates API documentation automatically based on the Open API specification. It presents a browsable, usable Web site as a URL within the API Web service. See also Open API.cURLcURL is a mechanism for transferring data using networking protocols. It is provided in two ways:\u2022 As a command line tool that allows a user to submit requests directly and see the results, usually for testing purposes.\u2022 As a library with integrations to several common programming languages, including C++, C#, PHP, and others.ModelA collection of properties, usually defined as name/value pairs or collections of name/value pairs, that make up a document or a portion of a document. An API may accept one or more models as input, to create a new record or modify an existing record using all the specified values. An API may also provide one or more models as output, either as a list of identical models (e.g., retrieving multiple records as part of a list document) or as a collection of related models (e.g., retrieving all models related to a particular Job document).Postman<p>A third-party platform for building and testing APIs; the Postman client application is available on several operating systems and provides a set of tools to test API calls without having to write code and helps debug API calls and response payloads. https://www.postman.com/</p>OAS,OpenAPIFormerly known as Swagger Specification, the OpenAPI Specification (OAS) defines a standard interface to RESTful APIs. This language-agnostic interface can then be used by code generation, documentation generation, and testing tools to access and understand the underlying API.\u00a0Refer to https://swagger.io/specification/ for more information."},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#api-basics","title":"API Basics","text":"<p>This section describes the fundamental ideas behind APIs, the REST protocol, and the portions of the Platform system involved.</p> <p>The purpose of an application program interface (API) is to allow an external computer or piece of software (here called an endpoint) to interact with the system that exposes the interface (here called the host), to allow the endpoint to do one or more of the following:</p> <ul> <li>Create new records in the host system</li> <li>Retrieve information from the host system</li> <li>Update existing records in the host system</li> <li>Delete existing records in the host system</li> <li>Trigger operations or business logic in the host system</li> </ul> <p>Unlike a user interface, an API is a mechanism for one piece of software to talk to another and usually does not require the action of a person. In some cases, however, an API is used to allow a third-party user interface to interact with the host system.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#rest-basics","title":"REST Basics","text":"<p>Representational State Transfer (REST) is an architectural style of principles that define a set of constraints for how two systems can communicate over a network such as the World Wide Web. These principles are used to create reliable Web APIs where no state information needs to be retained by the host system offering the API.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#features-and-benefits","title":"Features and Benefits","text":"<p>The REST architecture provides the following benefits:</p> <ul> <li> <ul> <li>Simple \u2013 In general, REST calls follow a set of common patterns that can be learned and followed without significant amounts of special syntax.</li> <li>Stateless - Being \u201cstateless\u201d allows the API provider to handle high volumes of requests with high performance.<ul> <li>The server is not required to keep state information in memory.</li> <li>The client is not required to connect to a specific server to utilize stored state information, so requests can be distributed among any number of servers.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#http-methods","title":"HTTP Methods","text":"<p>RESTful services utilize HTTP methods to differentiate between different types of API calls.</p> VerbCommunity Used ForGET\u00a0Usually retrieves a representation of the resource\u2019s current state, such as performing a simple query that gathers and returns information about one or more resources (e.g., database records) from the host system.In the Platform API, GET commands are used to retrieve setup documents, maintenance documents, or list documents.Examples include:Retrieving a list of all records of a certain document type, such as all Bids, all Jobs, or all Contacts in the system,<ul><li>Retrieving a list of all records of a certain document type that match specified criteria, such as all Bids that start in the current year, all Jobs associated with a specific Client, or all Contacts whose names begin with the letter A, or</li><li>Retrieving a specific record of a certain document type, such as all the properties of a Job with a specific Job ID.</li></ul>Note: A GET command is entirely contained within the URI sent to the endpoint. As a result, there is a limit on the amount of text that can be sent to the API, so GET commands usually do not support a significant amount of search or filter criteria.PATCHPatch usually updates an existing state with a specified one using partial information. See also PUT to completely replace an existing state, and POST for updating an existing state in some cases. In the Platform API, usually updates an existing record, such aschanging the mailing address of a Contact or changing the status of a Job.POSTPost usually processes the representation provided with the request to create a new representation or update an existing representation.\u00a0In the Platform API, POST commands are usually used to create new records, such as adding a new resource or creating a new Job.PUTPut usually updates an existing record by completely replacing an existing state with a specified one or creating a new state where the URI is already known. See also PATCH to replace only a portion of an existing state. In the Platform API, PUT commands will be used to perform upsert calls from v11; refer to POST commands for creating new items or PATCH commands for updating existing items.DELETEDelete commands are usually used to permanently remove existing records from the host system.\u00a0Note: DELETE commands should be used sparingly; to both preserve data integrity and provide historical information, it is usually recommended to change the Status of a record instead of deleting the record completely. <p>Response Codes</p> <p>REST services are built on top of the HTTP protocol, so calls to the REST service generate HTTP response codes. In many cases, the HTTP response code will be accompanied by additional information in the header or body of the message. In some cases, the HTTP response code may be the only response.</p> Response Code\u00a0Description2xx range\u00a0Success Codes200 OkThe call was successful. In most cases, there will be additional information returned by the API in the body of the message, such as the matching record(s) for a query, or the ID of a record created, modified, or deleted by a corresponding API call.204 No ContentThe server has fulfilled the request but does not need to return a response body. The server may return the updated meta information.4xx range\u00a0Client Error400 Bad RequestThe call was not successful due to an error in the URL or the syntax of the API call. Check the syntax of the API call to make sure there are no invalid characters.401 UnauthorizedThe call was not successful because the API requires a validcredentials, and they were not provided as part of the call.Response Code Description Verify that the call is providing login information in an acceptable manner.404 Not FoundThe call was not successful because the service could not find the requested API. Check the URL for any mismatches between the API call being sent and the documented API signature.5xx range\u00a0Server Error500 Internal Server ErrorThe call was not successful because it caused an error in the service during processing, such as providing an incorrect data type for a given property/field. Verify that all parameters are correct, and values are valid.502 Bad GatewayThe call was not successful because the service got an invalid response from the API. Verify that all parameters are correct, and values are valid. <p>For more information refer to the appropriate section of the HTTP protocol or a developer resource for HTTP status codes, such as the MDN Web Docs.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#xytech-platform-rest-api","title":"Xytech Platform REST API","text":"<p>The Platform is, at a fundamental level, a system that deals with creating, updating, and utilizing a particular type of data object referred to as a document.</p> <ul> <li>Each Platform document is a representation of a database table or collection of database tables.<ul> <li>Each document has a primary table and may have one or more sub-tables.</li> <li>All sub-tables are children of the primary table, and a sub-table can have one or more child sub-tables.</li> </ul> </li> <li>Each document is one of the following types of documents:<ul> <li>Setup - generally describes a single item, and usually only contains a primary table. Setup documents are often used to manage simple items used to generate lists of options in other documents, such as status labels or predefined sets of codes.</li> <li>Maintenance \u2013 generally describes either master data (which are used in transactional data) or transactional data. Maintenance documents often contain one or more sub-tables.</li> <li>List documents provide access to sets of other records, such as Setup and Maintenance documents.</li> </ul> </li> </ul> <p>The Platform REST API is JSON-based and has Open API v3.0 API specifications for each API call available in YAML. These specifications can be retrieved as a plain YAML file and are also readily available to be viewed in a browser through the Swagger UI. See the Error! Reference source not found. below for more information.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#high-level-data-model-diagram","title":"High level data model diagram","text":"<p>This diagram provides you with a high-level understanding of the primary Xytech Platform data objects and how they relate.</p> <p>Below the name of each data object is the REST API endpoint used for accessing the data object. Where ~/ is prefixed before the endpoint, that indicates it is a sub-table endpoint of the primary endpoint. See the Swagger documentation for full details.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#_1","title":"Media Operations Platform REST API Reference   10.6 \u2013 Xytech Systems","text":""},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#rest-api-v1-and-v2","title":"REST API v1 and v2","text":""},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#deprecation-of-v1-api","title":"Deprecation of v1 API","text":"<ul> <li>REST API v1 was the first Xytech REST API product. It had limitations that required breaking changes to improve so v2 was made available from Xytech v9.4 release with improved functionality.</li> <li>REST API v1 will no longer be supported in version 11.0 and beyond.</li> <li>All new integrations should use v2 API and existing integrations should port to v2</li> <li>To use v2 API, change the base URL version number from ../v1/.. to ../v2/..</li> </ul>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#additional-features-in-v2-api-as-of-platform-v102-release","title":"Additional Features in v2 API (as of Platform v10.2 release)","text":"<ul> <li>Payload structure is enhanced and updated to be more robust and scalable.     The document name is now always added as the root element of the payload with an array containing the details.\u00a0</li> </ul> <p>Example showing the additional root element jm_job: </p> API V1 JSON payload for GET JmJob<p>API V2 JSON payload for GET JmJob</p> <p>/JmJob/job_no=11261</p><p></p><p>/JmJob/job_no=11261</p><p></p> <ul> <li> <ul> <li>See the Swagger documentation for details of the JSON structure for each endpoint.</li> </ul> </li> <li> <p>Additional PATCH capabilities In addition to the existing v1 PATCH method where each changed field must be defined using the operation/path/value payload structure, you can now use the same JSON payload you would use for a POST call to update a record. This needs to use the header 'Content-Type: application/json-patch+json'. See the section below for more details.</p> </li> <li> <p>Pagination &amp; sorting API Pagination has been added to the REST API \u2018Get\u2019 Query for Lists. Parameters for:</p> <p><p>pageSize\u00a0</p>are the number of records returned per page.\u00a0pageare the page number to return.\u00a0<p>sort </p>is the field to sort by followed by ascending or descending order.\u00a0</p> <p>Example: To return the first 10 records on page 1 sorted by product_no: GET {server}}/JmOrgProductList?query=\"active\":\"Y\"}&amp;resultColumns=\"L\":\"product_no\",\"product_desc\"]}&amp;sort=\"product_no_desc\"]&amp;pageSize=10&amp;page=1</p> <p>This will allow sites to call for data in manageable payloads without exceeding memory limitations.</p> </li> </ul>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#connecting-to-the-rest-api","title":"Connecting to the REST API","text":""},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#licensing","title":"Licensing","text":"<p>While there is a specific license point for the REST API, by default all Platform installations are given access to the API.</p> <p>The REST API is a component of the Platform\u2019s Application Server. On hosted systems, it is available by default to all customers.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#instance-information-you-will-need","title":"Instance Information You Will Need","text":"<p>To be able to connect with the REST API, you will need to know the instance:</p> <ul> <li>Base URL e.g. \u2018https://example.com\u2019 (The same base url you use to access your system)</li> <li>Database name e.g. \u2018DEMO1\u2019</li> </ul> <p>For systems installed prior to mid 2023, you may also require the port number. All later systems are now setup with a proxy to avoid the need to know the port number.</p> <p>If you do not have this information, please contact Xytech Technical Support.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#swagger-api-documentation","title":"Swagger API Documentation","text":"<p>From Platform version v10.2, a Swagger index page has been introduced to assist in the navigation and creation of Swagger YAML documentation. The Swagger index page can be found by entering the base URL you use for accessing the Platform and adding \u201c/ApiDocs\u201d to the end (e.g., www.xytechexample.com/XYT_TEST/ApiDocs). The Xytech API Index page is displayed.\u00a0</p> <p></p> <p>Using the Index The Index is comprised of the following areas:</p> <ul> <li>Version: Displayed in the upper left corner of the screen. This shows the API version, currently either v1 or v2.</li> <li>Selected Database: The name of the database currently selected for this host.     Only modules for that database are shown.</li> <li>Available Databases: (Where multiple databases exist on the same host) Click a database to select it and view its associated modules.</li> <li>Filter Documents: Enter text into this field and press [Enter] to only display matching document descriptions. To clear the filter, delete the text and press [Enter].</li> <li>Module and Document List: Only modules in the selected database are displayed. Click any Module to expand and show the documents it contains. Each document has a label that describes its type (Document [maintenance], List, or Setup).</li> </ul>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#for-versions-prior-to-v102","title":"For versions prior to v10.2","text":"<p>For versions prior to v10.2 you will need to generate the Swagger documentation manually for each document endpoint.</p> <p>Use a browser to generate the Swagger document:</p> <p>http://{host}:{port}/API/v2/database/{db_name}/spec/{docName}</p> <p>For example:</p> <p>http://myhost:8088/API/v2/database/mp10/spec/JmJob</p> <p>The above URL will generate the Swagger document and then display the Swagger document.</p> <p>To display generated Swagger documents, browse to:</p> <p>http://{host}:{port}/REST/SwaggerUI/dist/index.html?document={docName}_v2</p> <p>For example:</p> <p>http://myhost:8088/REST/SwaggerUI/dist/index.html?document=JmDivision_v2</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#authentication","title":"Authentication","text":"<p>The REST API currently uses Basic Authentication and will require a database login account. Always use HTTPS encrypted protocol when communicating with the REST API to ensure credentials are not passed in clear text.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#using-postman-as-a-test-client","title":"Using Postman as a test client","text":"<p>This section describes using the third-party Postman application as an API client for testing and troubleshooting purposes. The example uses the JmJob (Job) endpoint.</p> <p>To execute a GET call to retrieve an existing record:</p> <ol> <li>Open the Postman application</li> <li>From File click New and click HTTP Request</li> <li>Leave the method as GET</li> <li>Enter the URL:  <ul> <li>http://{base_url}/API/v2/database/{dbname}/jmJob/job_no=100\u00a0<ul> <li>Replace {base_url} &amp; {dbname} with your base URL &amp; database name and provide a valid Job Number that exists in your instance.</li> </ul> </li> </ul> </li> <li>On the Authorization tab, set Type to Basic Auth and enter a valid username and password, e.g. xytech/xytechpw</li> <li>Click Send and observe the response.</li> </ol> <p>To execute a POST call to create a new record: </p> <ol> <li>Open the Postman application.</li> <li>From File click New and click HTTP Request.</li> <li>Change the method to POST.</li> <li>Add a Header:<ul> <li>Key: Content-Type</li> <li>Value: application/json</li> </ul> </li> <li>Enter the URL: http://{base_url}/API/v2/database/{dbname}/jmJob</li> <li>On the Authorization tab, set Type to Basic Auth and enter a valid username and password, e.g. xytech/xytechpw</li> <li>On the Body tab, set the type to json, and provide a valid JSON object with the minimum fields to create a job. For example, to create a simple Job:</li> </ol> <p>{</p> <p>\"jm_job\": [</p> <p>{</p> <p>\"cust_id\": {</p> <p>\"list_id\": \"409\"</p> <p>},</p> <p>\"job_desc\": \"Passing Fancy\",</p> <p>\"job_no\": {</p> <p>\"job_no\": -1</p> <p>},</p> <p>\"job_type_no\": {</p> <p>\"job_type_no\": 11</p> <p>}</p> <p>}</p> <p>]</p> <p>}</p> <p>NOTES:</p> <ul> <li> <ul> <li>To generate the primary key job_no, set the value to -1.         When creating multiple sub-records in a single call, subsequent records must advance the primary key ID by -1. E.g -1, -2, -3 etc\u2026</li> <li>Be aware some fields are mandatory such as Job Type (job_type_no) and Customer ID (list_id).</li> <li>Numeric values will be accepted with or without quotes.</li> </ul> </li> </ul> <p>8. Click Send and observe the response with status code 200 (success with response body).</p> <p>The id of the created record is returned in a header parameter called 'Location'.</p> <p>In v10.6 SP1 a response payload will contain the ID(s) of newly created records.</p> <p>To execute a DELETE call to remove an existing record:</p> <ol> <li>Open the Postman application.</li> <li>From File click New and click HTTP Request.</li> <li>Change the method to DELETE.</li> <li>Enter the URL:     http://{base_url}/api/v2/database/{dbname}/JmJob/job_no=67982</li> <li>On the Authorization tab, set Type to Basic Auth and enter a valid username and password, e.g. xytech/xytechpw</li> <li>Click Send and observe the response with status code 204 (success with no response body).</li> </ol>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#using-curl-as-a-test-client","title":"Using cURL as a test client","text":"<p>This section describes using the third-party cURL command line utility as an API client for testing and troubleshooting purposes.\u00a0</p> <p>Many REST clients (either via an online tool or desktop application) use a lightweight program called curl to interact over many different types of network protocols (including HTTP, HTTPS, FTP, IMAP, etc.) Windows users may use the curl command from the Command Prompt to call teh REST API and output dumps of useful data.</p> <p>Curl is included with Windows v10 1803 and later.</p> <p>Example curl on Windows to fetch job details and download the response to a file (replace credentails, base url and database name with your values:</p> <pre><code>curl -u xytech:password &lt;a href=\"https://{base/\"&gt;https://{base_&lt;/a&gt;url}/api/v2/database/{database name}/JmJob/job_no=342 -H \"Accept: application/json\" &amp;gt;c:\\temp\\ApiResponse.txt\n</code></pre>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#key-fields-in-the-payload-structure","title":"Key fields in the payload structure","text":"<ul> <li>The nested sub-group identified by the primary key field name, provides all the key fields of a document. As a minimum, this sub-group always contains the primary key field and an 'external key' field.</li> </ul> <p>Example shows a section of the Work Order's (jm_work_order) key fields in the sub-group wo_no_seq.</p> <p>{</p> <p>\"jm_work_order\": [</p> <p>{</p> <p>\"wo_no_seq\": {</p> <p>\"wo_no_seq\": \"2627-1\",</p> <p>\"external_key\": null</p> <p>},</p> <p>\"custom_field_data_no\": 63888,</p> <p>\"wo_desc\": \"Dscription2\",</p> <p>\"wo_desc_2\": null,</p> <p>...</p> <ul> <li> <ul> <li>In the above example wo_no_seq and external_key are the two key fields that can be used in lookup requests.</li> <li>Some documents may have additional key fields such as Media Assets (known by the document name lib_master) See example below.</li> </ul> </li> </ul> <p>Example Media Asset document where there are additional key fields for 'barcode' &amp; 'umid' in the 'master_no' group.</p> <p>{</p> <p>\"lib_master\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 53,</p> <p>\"barcode\": \"1838\",</p> <p>\"external_key\": null,</p> <p>\"umid\": null</p> <p>},</p> <p>\"cust_id\": {</p> <p>\"list_id\": \"23\",</p> <p>\"other_cust_id\": null,</p> <p>\"cust_reference\": null,</p> <p>\"external_key\": null,</p> <p>\"cust_id\": \"23\"</p> <p>},</p> <p>\"customer_name\": \"Gotta Dance Productions\",</p> <p>\"master_desc\": \"A Winter's Tale\",</p> <p>\"barcode\": \"1838\",</p> <p>\"container_master_no\": null,</p> <p>...</p> <ul> <li>External key fields exist on all documents and are designed to be used by external systems to store the external system's unique identifier for the record. The external key field can then be used in future look-ups as opposed to the external system having to know the Xytech key field value..</li> </ul>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#example-postman-collection-calls","title":"Example Postman Collection calls","text":"<p>An extensive set of example API calls is available via the Platform\u2019s REST API Postman Collection. This collection contains example calls for three types of documents (maintenance, list, and setup).\u00a0</p> <p>We suggest forking the collection to your own workspace which enables you to 'pull' for updates as teh collection grows.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#patch-update-datetime-fields-to-null","title":"PATCH - update datetime fields to 'null'","text":"<p>It may seem like an obvious approach to use the 'update' operation with a value of 'null' to clear a datetime field, but datetime fields will not get set to null in that way.</p> <p>The only way to 'null' a datetime field is by using the 'remove' operation.</p> <p>Example PATCH payload that set's a datetime field to 'null':</p> <p>[</p> <p>{</p> <p>\"op\": \"remove\",</p> <p>\"path\": \"goodnight_date\",</p> <p>\"value\": null</p> <p>}</p> <p>]</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#query-parameters","title":"Query parameters","text":"<p>GET and PATCH List endpoints support query parameters.</p> <p>This section describes the syntax and options used for the query parameter. This is a mandatory parameter for List documents.</p> <p>The general format for a \u201cquery\u201d parameter is to add the parameter as query={} to the end of a GET request for a List document after the parameter delimiter (\u201c?\u201d), where the value of query= is a JSON object:</p> <p>http://{base_url}/documentList?query={key: value}</p> <p>Such as:</p> <p>http://{base_url}/jmJobList?query={\"job_no\": \"12345\"}</p> <p>Note: The query parameter is supported only for GET and PATCH requests for List type documents and is not supported by GET requests for Setup or Maintenance documents.</p> <p>In the simplest form, the value is a single piece of information, such as a string or integer. In more complex forms, the value is a JSON object containing specific formats as described below.</p> <p>In these examples below, the baseurl is assumed to include the document endpoint e.g \u2018https://example.com/api/v2/database/example/JmJobList\u2019</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#tip-url-encoding-of-special-characters-eg-and","title":"TIP: URL encoding of special characters e.g. % and +","text":"<p>When using HTML special characters as part of the query value, they must be URL encoded.</p> <p>Example:\u00a0\u00a0to use a wildcard query such as \"%dave%\", the % needs substituting with %25. \u00a0Once URL encoded will look like this %25dave%25</p> <p>Example GET query with URL encoded wildcard :</p> <p>{{server}}/MoMediaOrderList?query={\"wo_desc\":\"%25dave%25\"}&amp;resultcolumns={\"L\": [\"wo_no\", \"wo_desc\"]}</p> <p>(Specifically the reason why\u00a0%dave% fails to return valid results it that %da\u00a0is the encoding for the\u00a0\u00da character)</p> <p>This also applies to datetime values that use the offset attribute with the + sign.</p> <p>To include a value of \"2023-06-01T09:00+5:00\" in a URL query parameter, substitute + with %2b</p> <p>Example:</p> <p>?query={\"wo_begin_dt\":{\"$range\":[\"2023-06-01T09:00%2b5:00\",\"2023-06-01T17:00%2b5:00\"]}}</p> <ul> <li>String or Number</li> </ul> Description\u00a0The value in returned items must match a specified string. The stringcan either be letters or numbers. Wildcard \u2018%\u2019 can be used.\u00a0Syntax\u00a0\u201cfield\u201d:\u201d value\u201d<p>Examples:</p><p>baseurl?Query={\u201cjob_desc\u201d:\u201d Big Apple Live\u201d}</p><p>baseurl?Query={\u201cjob_desc\u201d:\u201d%Big%\u201d}</p><p>baseurl?Query={\u201cjob_no\u201d:101101}</p> <p>To specify multiple key/value pairs, separate each key/value pair with a comma: baseurl?query={\"cust_id\":\"123\",\"job_type_no\":\"4\"} baseurl?query={\"cust_id\":\"123\",\"job_type_no\":\"4\",\"active\":\"Y\"} Note: When specifying multiple key/value pairs, the API will return only items that match ALL specified criteria.</p> <ul> <li>Range</li> </ul> Description\u00a0The value in returned items must fall between a specified minimumand maximum numeric value.Syntax\u00a0\u201cfield\u201d:{\"$range\":[lower_limit, upper_limit]}Examplesbaseurl?Query={\u201cjob_no\u201d:{\"$range\":[100, 199]}}baseurl?query={\"wo_begin_dt\":{\"$range\":[\"2023-12-01\",\"2023-12-31\"]}}baseurl?query={\"wo_begin_dt\":{\"$range\":[\"2023-06-01T09:00\",\"2023-06-01T17:00\"]}} <ul> <li>In (Set)</li> </ul> Description\u00a0The value in returned items must match one of the values provided in a given set of values.Syntax\u00a0\u201cfield\u201d:{\"$in\":[\u201cvalue_1\u201d,\u201dvalue_2\u201d, \u2026 \u201dvalue_n\u201d]}Examples\u00a0baseurl?Query={\u201cjob_no\u201d:{\"$in\":[100, 105, 110, 119]}} <p>TIP: Searching for multiple wildcard values</p> <p>If you wanted to search for multiple wildcard values contained within a single field that all need to exist, then you can include a list of wildcard values.</p> <p>For example, if you wanted to search for media assets that have \"Tale\" AND \"Dark\" in their \"master_desc\" field, you can use the following query parameter:</p> <p>{\"master_desc\":{$in:[\"%Tale%Dark%\",\"%Tale%Dark%\"]}}</p> <p>Or with encoding of the % symbol (if using Postman) you need:</p> <p>{\"master_desc\":{$in:[\"%25Tale%25Dark%25\",\"%25Tale%25Dark%25\"]}}</p> <ul> <li>Null / Empty</li> </ul> Description\u00a0The value in returned items must be NULL. Note: Put pipe charactersaround NULL to differentiate it from the literal string \u201cNULL\u201d.Syntax\u00a0\"field\u201d: \u201c|NULL|\u201d\u00a0Examples\u00a0baseurl?Query={\u201cphone_number\u201d:{\"|NULL|\"}} <ul> <li>NE (Not Equal)</li> </ul> Description\u00a0The value in returned items must not match the specified number, string, or NULL.Syntax\u00a0\u201cfield\u201d:{\"$ne\":\u201dvalue\u201d}<p>Examples:\u00a0Not equal\u00a0Not null\u00a0\u00a0Not like</p><p>baseurl?Query={\"job_desc \":{\"$ne\":\"Big Apple Live\"}}baseurl?Query={\"cust_id\":{\"$ne\":1001}}baseurl?Query={\"jm_phase_external_key\":{\"$ne\":\"|NULL|\"}}baseurl?Query={\"wo_desc\":{\"$ne\":\"Test%\"},\"wo_type_no\": 83}\u00a0</p> <p>NULL Values</p> <p>The Null parameter returns any record that has a null value for the specified key, which indicates that no value has ever been set. This differentiates it from an empty string for text-based or date-based properties, a 0 value for numbers, and true or false values for Boolean properties.</p> <p>Note: Not all properties support null values. If possible, check whether the database column in the appropriate column allows nulls.</p> <p>Keys are strings and generally match the column name from a given database table. It is recommended to match the case of the key name as shown in the Swagger API documentation if possible.</p> <p>Values</p> <p>- String values are not case-sensitive.</p> <p>- DateTime values should be provided in a valid ISO date format.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#resultcolumns-parameter","title":"resultColumns parameter","text":"<p>Used by the GET method on List and (v10.6) Maintenance endpoints.</p> <p>ResultColumns parameter is used to define the fields you wish to have returned in the response. Without this parameter, the response will contain all document fields.</p> <p>For example: {baseurl}/JmJobList?Query={\"job_no\":2}&amp;resultColumns={\"L\":[\"job_no\",\"job_desc\"]}</p> <p>Job No. and Job Description fields will be included in the response. Important to include the \u201cL\u201d top-level element.</p> <p>Sub-Table columns</p> <p>Many endpoints include related sub-tables in their responses. Example syntax to include specific sub-table columns.</p> <p>Below example fetches a tranmission order description and all it's service row numbers:</p> <p>{base_url}/XmTransmissionOrder/wo_no_seq=7655-1?resultColumns={\"jm_work_order\":[\"wo_desc\"],\"mo_service_row\":[\"service_row_no\"]}</p> <p>Response:</p> <p>{</p> <p>\"jm_work_order\": [</p> <p>{</p> <p>\"wo_desc\": \"WS Transmission Test\",</p> <p>\"mo_service_row\": [</p> <p>{</p> <p>\"service_row_no\": {</p> <p>\"service_row_no\": 9933,</p> <p>\"external_key\": null</p> <p>}</p> <p>},</p> <p>{</p> <p>\"service_row_no\": {</p> <p>\"service_row_no\": 9934,</p> <p>\"external_key\": null</p> <p>}</p> <p>}</p> <p>]</p> <p>}</p> <p>]</p> <p>}</p> <p>Performance recomendation. Always use the ResultColumns parameter otherwise responses will return large numbers of fields most of which will not be required and only adds to the system perfromance overhead. In future API versions, this will become a mandatory parameter.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#additional-parameters","title":"Additional parameters","text":""},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#saveargument","title":"saveArgument","text":"<p>In some cases, you must also add a header with the SaveArgument parameter to trigger the app server to perform a function as part of an API call. For example, when creating a Work Order, to load a Work Order Template you must provide the wo_template_no value in the payload as well as set the SaveArguement header:</p> <p>LoadTemplate: SaveArgument : {\"LoadTemplate\":\"2\"}</p> <p>LoadServiceTemplate, loads a service template to a Media Order or a Transmission Order:</p> <p>SaveArgument : {\"LoadServiceTemplate\":\"10\"}</p> <p>BidApproval, changes the bid approval state of a Bid using an number that maps to the approval</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#saveargument-bidapproval0","title":"SaveArgument : {\"BidApproval\":\"0\"}","text":"<p>Approval number mapping:</p> 0Approval1Unapproval2ApproveAsChangeMemo3ApproveAndUnApproveOriginal4Abort"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#alternatekeyhandling","title":"alternatekeyhandling","text":"<p>Suppresses additional key fields from the responses. If you do not need to work with key fields other than the primary key, use this parameter to keep the API call performant and reduce the processing overhead when not working with alternate key fields (v10.6).</p> <p>Applicable to all GET calls for List, Maintenance &amp; Report endpoints.</p> <p>Values are \u2018ignore\u2019 or \u2018include\u2019.</p> <p>Default value = \u2018include\u2019 (includes alternate keys in the response)</p> <p>Example:</p> <p>URL Parameter:- alternatekeyhandling:include (default) </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915,</p> <p>\"barcode\": \"MM915\",</p> <p>\"external_key\": \"VX-90\",</p> <p>\"umid\": null</p> <p>},</p> <p>\"cust_id\": null,</p> <p>\"company_name\": null,</p> <p>\"master_desc\": null,</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>URL Parameter:- alternatekeyhandling:ignore </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915</p> <p>},</p> <p>\"cust_id\": null,</p> <p>\"company_name\": null,</p> <p>\"master_desc\": null,</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>Notice how the additional key fields barcode, external_key &amp; umid are not provided.</p> <p>It's recommended to always include this header with the value 'ignore', unless working with alternate keys.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#nullvaluehandling","title":"nullvaluehandling","text":"<p>Suppresses all null value fields from the response. Using this parameter reduces the payload size dramatically, especially for larger queries (v10.6).</p> <p>Applicable to all GET calls for List, Maintenance &amp; Report endpoints.</p> <p>Values are \u2018ignore\u2019 or \u2018include\u2019.</p> <p>Default value = \u2018include\u2019 (includes null values in the response)</p> <p>Example:</p> <p>URL Parameter:- nullvaluehandling=include (default) </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915,</p> <p>\"barcode\": \"MM915\",</p> <p>\"external_key\": \"VX-90\",</p> <p>\"umid\": null</p> <p>},</p> <p>\"cust_id\": null,</p> <p>\"company_name\": null,</p> <p>\"master_desc\": null,</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>URL Parameter:- nullvaluehandling=ignore </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915,</p> <p>\"barcode\": \"MM915\",</p> <p>\"external_key\": \"VX-90\"</p> <p>},</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>Notice how all null value fields are omitted. It's recommended to always include this parameter with the value 'ignore', unless visibility of null values is required.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#source-time-zone-name","title":"Source-Time-Zone-Name","text":"<p>The REST API uses Date time formats in ISO format with an optional offset value.</p> <p>e.g. 2014-11-03T22:20:00+00:00</p> <p>If you omit the offset value when using POST to create a record, you can use a header parameter to set the time zone your dates are using. Key: Source-Time-Zone-Name\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Value: {Windows Time Zone name}</p> <p>e.g. : header 'Source-Time-Zone-Name: Pacific Standard Time '</p> <p>Will create records using Pacific Standard Time as the time zone for the payload times. Remember to omit the offset values in your time formats.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#patch-using-post-payload","title":"PATCH Using POST Payload","text":"<p>There are two PATCH methods, one where you define the field and the operation, the other is to use the full POST JSON payload.</p> <p>To use the PATCH with the full JSON payload, you must include the header parameter:</p> <p>'Content-Type: application/json-patch+json'</p> <p>Example Job update (cURL format):</p> <p>curl --location --request PATCH</p> <p>'https: //{base_url}/api/v2/database/{database_name}/JmJob/job_no=345' \\</p> <p>--header\u00a0'Content-Type:\u00a0application/json-patch+json'\u00a0\\</p> <p>--header\u00a0'Authorization:\u00a0Basic\u00a0eHl0ZWNoOk1lZGlhMjwqNSE='\u00a0\\</p> <p>--data\u00a0'{</p> <p>\"jm_job\":\u00a0[</p> <p>{</p> <p>\"job_no\":\u00a0{</p> <p>\"job_no\":\u00a0345</p> <p>},</p> <p>\"job_desc\":\"Leaves\u00a0of\u00a0October\",</p> <p>\"job_type_no\":\u00a0{</p> <p>\"job_type_no\":\u00a07</p> <p>},</p> <p>\"po\":\u00a0\"PO1234\",</p> <p>\"job_reference\": \"Streets\u00a0Ahead\"</p> <p>}</p> <p>]</p> <p>}'</p> <p>Notes:</p> <p>The payload must include the existing primary key (job_no in the above example) as a URL parameter as well as in the body payload.</p> <p>The expected response status code for a successful PATCH is \u2018204\u2019 and there will be no response body.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#patch-using-list-endpoints","title":"PATCH using List endpoints","text":"<p>List endpoints also support the PATCH method so that you can update multiple records using a query (see \u2018GET \u2013 Query Parameters\u2019 section above for details on available query parameters). This method is teh equilivant API functionality of Grid Update feature of the UI. Example to update multiple jobs using the $in query parameter:</p> <p>PATCH {base_url}/JmJobList?query={\"job_no\": {\"$in\": [\"410\",\"411\"]}}</p> <p>[</p> <p>{</p> <p>\"op\":\u00a0\"replace\",</p> <p>\"path\":\u00a0\"job_reference\",</p> <p>\"value\":\u00a0\"These\u00a0are\u00a0not\u00a0taxed\"</p> <p>}</p> <p>]</p> <p>As\u00a0with\u00a0GET,\u00a0wildcards\u00a0\u2018%\u2019\u00a0are\u00a0supported\u00a0such\u00a0as:</p> <p>PATCH {base_url}__/\u00a0JmJobList?Query={\"job_desc\":\u00a0\"Sport%\"}</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#post-method","title":"POST method","text":"<p>Mandatory Fields to Create New Items</p> <p>The Swagger model identifies many fields as mandatory (nullable: false), which indicates that a value must be provided when the item is written to the database. However, in some cases, the business logic will provide default values, so it may not be strictly necessary to pass values for these fields to the API to create a new record.\u00a0 For example, in a basic payload to create a Work Order, Swagger identifies at least 25 fields as mandatory, but the most basic payload to create a Work Order is below:</p> <p>{</p> <p>\"jm_work_order\":\u00a0[</p> <p>{</p> <p>\"external_key\":\u00a0\"externalID\",</p> <p>\"wo_desc\":\u00a0\"Match2\",</p> <p>\"wo_begin_dt\":\u00a0\"2022-01-01T00:00\",</p> <p>\"wo_end_dt\":\u00a0\"2022-01-01T06:00\",</p> <p>\"wo_type_no\":\u00a02,</p> <p>\"phase_code\":\u00a0\"Bid\",</p> <p>\"rate_card_no\":\u00a01,</p> <p>\"cust_id\":\u00a0\"6\",</p> <p>\"wo_template_no\":\u00a0\"2\"</p> <p>}</p> <p>]</p> <p>}</p> <p>See other basic payload examples in the public Postman Collection.</p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#custom-field-handling","title":"Custom Field handling","text":"<p>Any custom fields you have defined through document customization are automatically included in REST API payloads. The naming convention is a combination of the Custom Code you created plus the internal field name concatenated with an underscore. i.e. {customization code}_{field name}</p> <p>Document customization screen showing the Customnization Code</p> <p></p> <p>Document customization screen showing the internal field names:</p> <p></p> <p>Response from a GET call to fetch a Work Order showing the payload custom fields:</p> <p></p>"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#appendix-a-endpoint-list","title":"Appendix A \u2013 Endpoint List","text":"<p>There are over 1000 individual documents (endpoints) available to the Platform\u2019s REST API. Below is a small sample of those documents. The full list of available documents can be obtained directly from the Platform using the Document Customizations query found in the System module. Specific documentation on each document can be found via the Swagger site.</p> ID\u00a0Class Name\u00a0Document Description\u00a0Document Type10315\u00a0JmJob\u00a0Job\u00a0Maintenance315\u00a0JmJobList\u00a0Jobs\u00a0Select (List)10317\u00a0JmJobStatus\u00a0Job Statuses\u00a0Setup10318\u00a0JmJobTable1\u00a0Subscription\u00a0Setup10322\u00a0JmJobType\u00a0Job Types\u00a0Setup359\u00a0JmTrxReport\u00a0Transaction Reports\u00a0Select (List)10339\u00a0JmWorkOrderWork Order\u00a0Maintenance10346\u00a0JmWoTransaction\u00a0Work Order Transactions\u00a0Maintenance"},{"location":"Zendesk%20Articles/Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#appendix-b-swagger-examples","title":"Appendix B \u2013 Swagger Examples","text":""},{"location":"Zendesk%20Articles/Webhooks%20User%20Guide%20%E2%80%93%20Xytech%20Systems/","title":"Webhooks User Guide \u2013 Xytech Systems","text":""},{"location":"Zendesk%20Articles/Webhooks%20User%20Guide%20%E2%80%93%20Xytech%20Systems/#summary","title":"Summary","text":"<p>Introduced with release v10.4 this feature enables users, through the platform UI, to configure triggers that send API payloads to external Web service endpoints. This mechanism allows external systems to initiate workflows based on Xytech-generated messages and make calls back to the platform API to retrieve additional information.</p> <p>This feature enhances the existing Event Trigger functionality by adding a new notification type. New setup items now exist to define external host URLs and their endpoints. Each trigger specifies the fields used to dynamically generate the JavaScript Object Notation (JSON) payload and the external endpoint to which the payload will be sent. [10229]</p> <p>Figure 1 - Webhooks Related Data Objects</p> <p></p>"},{"location":"Zendesk%20Articles/Webhooks%20User%20Guide%20%E2%80%93%20Xytech%20Systems/#whats-new-in-release-v106","title":"What's new in release v10.6","text":"<ul> <li>Ability to define custom headers for Export Adaptors</li> <li>Enhanced URL fail-over logic for Outbound Connections</li> </ul>"},{"location":"Zendesk%20Articles/Webhooks%20User%20Guide%20%E2%80%93%20Xytech%20Systems/#setup-items","title":"Setup Items","text":""},{"location":"Zendesk%20Articles/Webhooks%20User%20Guide%20%E2%80%93%20Xytech%20Systems/#outbound-connection","title":"Outbound Connection","text":"<p>Outbound Connection defines and sets up the external system\u2019s URL and authentication that are common to one or more endpoints defined by the External Adaptor.</p> <p>Figure 2 - Standard Layout of an Outbound Connection</p> <p></p> Setting Description Description Enter a label for the connection, such as the name and version of the external system or interface. External Key Optionally enter a label to identify the external system, as with any Xytech document. Authentication Method Select the method used to log in to the external system: <ul> <li>Basic - Enter the Username and Password, below.</li> <li>API Key \u2013 Enter the Key and Value pair into the Username and Password fields, below. Values will be added to the header.</li> <li>Token -\u00a0</li> </ul> <p>Base URL 1</p> <p>Base URL 2</p> <p>| </p> <p>Enter the base URL(s) of the external system.\u00a0</p> <p>Base URL 1 is required.</p> <p>Base URL 2 is optional.\u00a0</p> <p>See note below on Base URL fail over</p> <p>Username</p> Enter the login account used to authenticate to the external system. <p>Password</p> <p>| Enter the password used to authenticate to the external system. |</p> <p>Base URL Fail-over</p> <p>Where you have specified a secondary URL, the fail-over logic will be enabled.</p> <p>If Base URL 1 does not respond after the retry count, set in the Export Adaptor, the system will then fail-over to Base URL 2.</p> <p>Assuming Base URL 2 is successful, all following triggers will first be sent to Base URL 2.</p> <p>If Base URL 2 fails to respond, then the system will fail-over back to Base URL 1.\u00a0</p> <p>If both Base URLs are unavailable, the system will give up after the fail-over Base URL fails to respond. (it will not continue to flip-flop between Base URLs)</p>"},{"location":"Zendesk%20Articles/Webhooks%20User%20Guide%20%E2%80%93%20Xytech%20Systems/#export-adaptor","title":"Export Adaptor","text":"<p>Export Adaptors define the endpoint(s) for an Outbound Connection. An Export Adaptor is assigned to a specific Event Trigger so that the triggered payload knows where to be sent.</p> <p>Figure 3 - Standard Layout for External Adaptor Setup</p> <p></p> Setting Description Description Enter a label for this adapter, such as the purpose and criteria of the message. Output Type Select the type of system to which messages will be sent. Currently, only REST is supported. Output Format Select the standard used to format outbound data, either JSON or XML. Response Format Not used - (will be used from release v11 for response parsing) Output Method Select the method or verb used to send messages. Available options include POST, PATCH, PUT, and DELETE. Connection Select the Outbound Connection for this Export Adaptor. Endpoint Add the endpoint of the API and include the initial backslash. E.g. /orders. The endpoint can include URL Parameters, as described in URL Parameters below If there is no endpoint and the payload can be sent to the base URL, simply add a forward slash \u2018/\u2019 into the endpoint field. Retry Count If there is no response from the endpoint, the retry count defines the number of times the system will attempt to send the payload before trying the other Outbound Connection URL (if one has been defined). Retry Delay The duration in seconds between retries when an outbound message does not receive a response. Time Out The duration in seconds to wait for a response from the endpoint. Disable Logging Select (check) to stop capturing activity into the Export Adapter Log. The default setting is deselected (cleared). Headers Provides the ability for the webhook to send custom headers and whether they are to be treated as Content Headers (default = false) <p>URL Parameters URL Parameters can be added to endpoints and include a combination of static text and dynamically populated values from the triggered document. Use the same field naming convention as defining the payload template for an Event Trigger. Examples:</p> <ul> <li> <ul> <li> <p>{base URL}/{endpoint}/external_key=[DOC.external_key]</p> </li> <li> <p>{base URL}/{endpoint} /job_no=[DOC.job_no]/jm_episode</p> </li> </ul> </li> </ul>"},{"location":"Zendesk%20Articles/Webhooks%20User%20Guide%20%E2%80%93%20Xytech%20Systems/#event-trigger","title":"Event Trigger","text":"<p>The Webhooks functionality builds on the existing Event Trigger features of the Media Operations Platform, providing a notification template option where you can assign an Export Adaptor and the payload template.</p> <p>The Event Trigger defines the criteria that determine when a payload is sent, the method and content of the payload, and the Export Adapter to which it is sent.</p> <ul> <li>The Event Triggers and Conditions tabs determine the criteria of when to send payloads.</li> <li>The Notifications tab determines the method used to send the payload.</li> <li>The Notification Template tab determines the destination of the trigger content.</li> </ul> <p>Refer to the Online Help for more information about Event Triggers and how to configure them.</p> <p>Figure 4 - Event Trigger Source</p> <p></p> Event Trigger options ActiveSelect (check) to make this payload active, or deselect (clear) to stop sending messages for this payload.Event CodeUse the event code of NOTIFYEventDescription of the triggerEvent Type<p>Select when to trigger:</p><p>INSERT sends messages when a record is first created.</p><p>UPDATE sends messages when a record is modified.</p><p>DELETE sends messages when a record is deleted.</p>DocumentSelect the data object for the trigger.Doc Table NameSelect the sub-table of the document for the trigger.AccessSelect Global to trigger payloads for the entire system, or select an access method (Division or Work Group) to limit payloads to a specific subset of the system.DivisionWhen Access is set to Division, select the Division for which payloads will be sent. Only documents related to the selected Division will generate payloads.Work GroupWhen Access is set to Work Group, select the Work Group for which payloads will be sent. Only documents related to the selected Work Group will generate payloads. <p>Conditions \u2014 Defines the field conditions that initiate a trigger, such as when a specific field is set or modified.</p> <p>Figure 5 - Event Trigger Conditions</p> <p></p> <p>Notifications \u2014\u00a0Establishes the notification type \u2013 select \u2018Email/Alert\u2019 for webhooks.</p> <p>Figure 6 - Event Trigger Notification Type</p> <p></p> <p>Notification Template \u2014 Defines the action to take for the trigger.</p> <p>Figure 7 -Event Trigger Layout for Export Adaptor</p> <p></p> <p>Export Adaptor</p> <p>Select the Export Adaptor to use, as configured in the Export Adaptor section above.</p> <p>Generate Default Template</p> <p>Click to generate a standard payload template for the selected Document, Event Type, and Export Adaptor.</p> <p>If any of the Document, Event Type, or Export Adaptor Type definitions change, you should re-generate the default template which will overwrite the previous template. If manual changes have been made to the template, you can update manually or note the additions prior to regenerating the template and reapply the changes.</p> <p>Export Adaptor Template</p> <ul> <li>Displays the payload template used to generate the payload.</li> <li>Either in JSON or XML format. (The format of the template should match the format specified in the Export Adapter that will use the template.)</li> <li>Caution needs to be taken to ensure correct syntax is used and avoid adding carriage returns that add invisible or illegal characters.</li> <li>It\u2019s recommended to construct the template in a syntax-checking text editor outside of the Xytech UI first before pasting it back into the UI to avoid errors.</li> <li>If there are errors, this will be visible in the export adaptor log during trigger sending and will fail to send.</li> <li>Users can add document fields to the payload using the syntax [DOC.fieldName]     Optionally, users can drag and drop a field from the Template Fields list on the left into the payload template field. Note that you can only use fields from the triggered document and not related tables.</li> </ul> <p>Figure 8 - Dragging a field from the Template Fields list into the payload template.</p> <p></p> <p>Prefix File Naming Conventions</p> <ul> <li>The generic \u2018DOC\u2019 prefix before the field name is an abbreviation/placeholder for the triggered document. E.g. DOC.wo_no_seq</li> <li>You can also use the table name as the prefix to the field name.     E.g. jm_work_order.wo_no_seq</li> </ul>"},{"location":"Zendesk%20Articles/Webhooks%20User%20Guide%20%E2%80%93%20Xytech%20Systems/#export-adaptor-logs","title":"Export Adaptor Logs","text":"<p>When Export Adaptors are enabled for logging, all external communications will be logged into the Export Adaptor Log to assist with auditing and troubleshooting. (By default, logging is enabled for all adaptors.) From the navigation menu, click System and click Export Adaptor Logs to view the log entries.</p> <p>Figure 9 - Export Adaptor Logs List</p> <p></p> <p>Click the ID in the Export Adaptor Log No column to view the details of a log entry, including all relevant values such as date times and request/response payloads.</p> <p>Figure 10 - Export Adaptor Log Entry</p> <p></p> <p>The Action Menu in individual documents also displays the Export Adaptor Logs for that specific item. For example, when viewing a Work Order, the Action filters the log entries to that specific Work Order only.</p> <p>Figure 11 - Export Adaptor Logs on the Work Order Action Menu</p> <p></p>"},{"location":"Zendesk%20Articles/Webhooks%20User%20Guide%20%E2%80%93%20Xytech%20Systems/#auto-log-clean-up","title":"Auto Log Clean-Up","text":"<p>To prevent the log tables from growing exponentially due to large payload values, a periodic clean-up process removes the request and response payloads from \"old\" log items. The system retains the log entry that provides information that the payload was sent but removes the payloads. The default setting for this process is to clean up log items older than 60 days. This setting can be manually overwritten if required via the Application Server configuration settings.</p>"},{"location":"Zendesk%20Articles/Webhooks%20User%20Guide%20%E2%80%93%20Xytech%20Systems/#webhook-errors-notification","title":"Webhook Errors Notification","text":"<p>If you want to be notified by email or an alert pop-up when a webhook fails to send or receives an error response, you can set up an additional Event Trigger on the Export Adaptor Log with a condition set to trigger on receiving an error response status code (or whatever is the most appropriate trigger condition for your integration).</p>"},{"location":"Zendesk%20Articles/Webhooks%20User%20Guide%20%E2%80%93%20Xytech%20Systems/#troubleshooting","title":"Troubleshooting","text":"<p>Trigger Condition Report</p> <p>While testing an Event Trigger, it\u2019s recommended to validate the trigger conditions by using the Event Trigger Report run from the modified record to check whether the trigger condition is met prior to saving the record.</p> <p>Test by Creating a Mock Web Service using Postman</p> <p>There are many ways to create a mock Web service for testing. One of the easiest is to use Postman.</p>"}]}